<?xml version="1.0" encoding="UTF-8" standalone="no"?><xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns="http://hl7.org/fhir" xmlns:a="http://www.w3.org/2005/Atom" xmlns:oms="urn:hl7-org:v2xml" version="2.0">
	<xsl:output indent="yes" method="xml"/>
	<!--  This stylesheet was generated by the Open Mapping Tools, from Open Mapping Software Ltd., www.OpenMapSW.com.  -->
	<xsl:template match="*" mode="test">
		<xsl:variable name="vTest" select="."/>
		<xsl:message>local name: [&lt;xsl:value-of select='local-name()'/&gt;]</xsl:message>
		<xsl:message>namespace uri: [&lt;xsl:value-of select='namespace-uri()''/&gt;]</xsl:message>
	</xsl:template>
	<xsl:template match="/oms:ADT_A01" mode="main">
		<xsl:variable name="v_1" select="/oms:ADT_A01"/>
		<xsl:apply-templates mode="feed_m1" select="$v_1"/>
	</xsl:template>
	<xsl:template match="oms:ADT_A01" mode="feed_m1">
		<xsl:variable name="feed.AtomFeed_in" select="."/>
		<a:feed>
			<xsl:variable name="v_7" select="$feed.AtomFeed_in/oms:PID"/>
			<xsl:variable name="resources.Patient_in" select="$v_7/self::node()"/>
			<xsl:call-template name="a:authorName_1"/>
			<xsl:call-template name="a:authorUri_2"/>
			<xsl:call-template name="a:id_3"/>
			<xsl:call-template name="a:title_4"/>
			<xsl:call-template name="a:updated_5"/>
			<xsl:apply-templates mode="reso_m2" select="$resources.Patient_in"/>
		</a:feed>
	</xsl:template>
	<xsl:template name="a:authorName_1">
		<a:authorName>
			<xsl:variable name="authorName_2" select="'OpenEyes transform software'"/>
			<xsl:value-of select="$authorName_2"/>
		</a:authorName>
	</xsl:template>
	<xsl:template name="a:authorUri_2">
		<a:authorUri>
			<xsl:variable name="authorUri_3" select="'http://OpenEyes.org'"/>
			<xsl:value-of select="$authorUri_3"/>
		</a:authorUri>
	</xsl:template>
	<xsl:template name="a:id_3">
		<a:id>
			<xsl:variable name="id_4" select="'12345'"/>
			<xsl:value-of select="$id_4"/>
		</a:id>
	</xsl:template>
	<xsl:template name="a:title_4">
		<a:title>
			<xsl:variable name="title_5" select="'FHIR Patient Bundle from V2 ADT'"/>
			<xsl:value-of select="$title_5"/>
		</a:title>
	</xsl:template>
	<xsl:template name="a:updated_5">
		<a:updated>
			<xsl:variable name="updated_6" select="'2014-04-15'"/>
			<xsl:value-of select="$updated_6"/>
		</a:updated>
	</xsl:template>
	<xsl:template match="oms:PID" mode="reso_m2">
		<xsl:variable name="resources.Patient_in" select="."/>
		<a:entry_Patient>
			<xsl:call-template name="a:id_6">
				<xsl:with-param name="resources.Patient_in" select="$resources.Patient_in"/>
			</xsl:call-template>
			<xsl:call-template name="a:content_7">
				<xsl:with-param name="resources.Patient_in" select="$resources.Patient_in"/>
			</xsl:call-template>
		</a:entry_Patient>
	</xsl:template>
	<xsl:template name="a:id_6">
		<xsl:param name="resources.Patient_in"/>
		<a:id>
			<xsl:variable name="fhir_id_8" select="$resources.Patient_in/oms:PID.3/oms:CX.1[(parent::node()/oms:CX.4/oms:HD.2 = '1.3.6.1.4.1.21367.2009.1.2.310')]"/>
			<xsl:value-of select="$fhir_id_8"/>
		</a:id>
	</xsl:template>
	<xsl:template name="a:content_7">
		<xsl:param name="resources.Patient_in"/>
		<a:content>
			<xsl:call-template name="Patient_8">
				<xsl:with-param name="resources.Patient_in" select="$resources.Patient_in"/>
			</xsl:call-template>
		</a:content>
	</xsl:template>
	<xsl:template name="Patient_8">
		<xsl:param name="resources.Patient_in"/>
		<Patient>
			<xsl:variable name="v_9" select="$resources.Patient_in/oms:PID.3"/>
			<xsl:variable name="complexTypes.Identifier_in_s3" select="$v_9/self::node()"/>
			<xsl:variable name="v_14" select="$resources.Patient_in/oms:PID.8"/>
			<xsl:variable name="complexTypes.CodeableConcept_in_s10" select="$v_14/self::node()"/>
			<xsl:variable name="birthDate_20" select="$resources.Patient_in/oms:PID.7/oms:TS.1"/>
			<xsl:variable name="v_22" select="$resources.Patient_in/oms:PID.5"/>
			<xsl:variable name="complexTypes.HumanName_in_s3" select="$v_22/self::node()"/>
			<xsl:variable name="v_31" select="$resources.Patient_in/oms:PID.11"/>
			<xsl:variable name="complexTypes.Address_in_s5" select="$v_31/self::node()"/>
			<xsl:apply-templates mode="comp_m3" select="$complexTypes.Identifier_in_s3"/>
			<xsl:apply-templates mode="comp_m4" select="$complexTypes.CodeableConcept_in_s10"/>
			<xsl:if test="string($birthDate_20)">
				<xsl:call-template name="birthDate_13">
					<xsl:with-param name="resources.Patient_in" select="$resources.Patient_in"/>
				</xsl:call-template>
			</xsl:if>
			<xsl:apply-templates mode="comp_m6" select="$complexTypes.HumanName_in_s3"/>
			<xsl:apply-templates mode="comp_m11" select="$complexTypes.Address_in_s5"/>
		</Patient>
	</xsl:template>
	<xsl:template match="oms:PID.3" mode="comp_m3">
		<xsl:variable name="complexTypes.Identifier_in" select="."/>
		<identifier>
			<xsl:variable name="value_10" select="$complexTypes.Identifier_in/oms:CX.1"/>
			<xsl:variable name="system_12" select="$complexTypes.Identifier_in/oms:CX.4/oms:HD.2"/>
			<xsl:if test="string($value_10)">
				<xsl:call-template name="value_9">
					<xsl:with-param name="complexTypes.Identifier_in" select="$complexTypes.Identifier_in"/>
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($system_12)">
				<xsl:call-template name="system_10">
					<xsl:with-param name="complexTypes.Identifier_in" select="$complexTypes.Identifier_in"/>
				</xsl:call-template>
			</xsl:if>
		</identifier>
	</xsl:template>
	<xsl:template name="value_9">
		<xsl:param name="complexTypes.Identifier_in"/>
		<value>
			<xsl:variable name="value_11" select="$complexTypes.Identifier_in/oms:CX.1"/>
			<xsl:if test="string($value_11)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_11"/>
				</xsl:attribute>
			</xsl:if>
		</value>
	</xsl:template>
	<xsl:template name="system_10">
		<xsl:param name="complexTypes.Identifier_in"/>
		<system>
			<xsl:variable name="system_13" select="$complexTypes.Identifier_in/oms:CX.4/oms:HD.2"/>
			<xsl:if test="string($system_13)">
				<xsl:attribute name="value">
					<xsl:value-of select="$system_13"/>
				</xsl:attribute>
			</xsl:if>
		</system>
	</xsl:template>
	<xsl:template match="oms:PID.8" mode="comp_m4">
		<xsl:variable name="complexTypes.CodeableConcept_in" select="."/>
		<gender>
			<xsl:variable name="v_15" select="$complexTypes.CodeableConcept_in/self::node()"/>
			<xsl:variable name="complexTypes.Coding_in_s10" select="$v_15/self::node()"/>
			<xsl:apply-templates mode="comp_m5" select="$complexTypes.Coding_in_s10"/>
		</gender>
	</xsl:template>
	<xsl:template match="oms:PID.8" mode="comp_m5">
		<xsl:variable name="complexTypes.Coding_in" select="."/>
		<coding>
			<xsl:variable name="code_16" select="$complexTypes.Coding_in/self::node()"/>
			<xsl:variable name="system_18" select="'http://hl7.org/fhir/v3/AdministrativeGender'"/>
			<xsl:if test="string($code_16)">
				<xsl:call-template name="code_11">
					<xsl:with-param name="complexTypes.Coding_in" select="$complexTypes.Coding_in"/>
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($system_18)">
				<xsl:call-template name="system_12"/>
			</xsl:if>
		</coding>
	</xsl:template>
	<xsl:template name="code_11">
		<xsl:param name="complexTypes.Coding_in"/>
		<code>
			<xsl:variable name="code_17" select="$complexTypes.Coding_in/self::node()"/>
			<xsl:if test="string($code_17)">
				<xsl:attribute name="value">
					<xsl:value-of select="$code_17"/>
				</xsl:attribute>
			</xsl:if>
		</code>
	</xsl:template>
	<xsl:template name="system_12">
		<system>
			<xsl:variable name="system_19" select="'http://hl7.org/fhir/v3/AdministrativeGender'"/>
			<xsl:if test="string($system_19)">
				<xsl:attribute name="value">
					<xsl:value-of select="$system_19"/>
				</xsl:attribute>
			</xsl:if>
		</system>
	</xsl:template>
	<xsl:template name="birthDate_13">
		<xsl:param name="resources.Patient_in"/>
		<birthDate>
			<xsl:variable name="birthDate_21" select="$resources.Patient_in/oms:PID.7/oms:TS.1"/>
			<xsl:if test="string($birthDate_21)">
				<xsl:attribute name="value">
					<xsl:value-of select="$birthDate_21"/>
				</xsl:attribute>
			</xsl:if>
		</birthDate>
	</xsl:template>
	<xsl:template match="oms:PID.5" mode="comp_m6">
		<xsl:variable name="complexTypes.HumanName_in" select="."/>
		<name>
			<xsl:variable name="v_23" select="$complexTypes.HumanName_in/oms:XPN.5"/>
			<xsl:variable name="primitiveTypes.String__subset_s3_in_s17" select="$v_23/self::node()"/>
			<xsl:variable name="v_25" select="$complexTypes.HumanName_in/oms:XPN.4"/>
			<xsl:variable name="primitiveTypes.String__subset_s2_in_s18" select="$v_25/self::node()"/>
			<xsl:variable name="v_27" select="$complexTypes.HumanName_in/oms:XPN.2"/>
			<xsl:variable name="primitiveTypes.String__subset_s1_in_s19" select="$v_27/self::node()"/>
			<xsl:variable name="v_29" select="$complexTypes.HumanName_in/oms:XPN.1"/>
			<xsl:variable name="primitiveTypes.String__in_s20" select="$v_29/self::node()"/>
			<xsl:apply-templates mode="prim_m7" select="$primitiveTypes.String__subset_s3_in_s17"/>
			<xsl:apply-templates mode="prim_m8" select="$primitiveTypes.String__subset_s2_in_s18"/>
			<xsl:apply-templates mode="prim_m9" select="$primitiveTypes.String__subset_s1_in_s19"/>
			<xsl:apply-templates mode="prim_m10" select="$primitiveTypes.String__in_s20"/>
		</name>
	</xsl:template>
	<xsl:template match="oms:XPN.5" mode="prim_m7">
		<xsl:variable name="primitiveTypes.String__subset_s3_in" select="."/>
		<prefix>
			<xsl:variable name="value_24" select="$primitiveTypes.String__subset_s3_in/self::node()"/>
			<xsl:if test="string($value_24)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_24"/>
				</xsl:attribute>
			</xsl:if>
		</prefix>
	</xsl:template>
	<xsl:template match="oms:XPN.4" mode="prim_m8">
		<xsl:variable name="primitiveTypes.String__subset_s2_in" select="."/>
		<suffix>
			<xsl:variable name="value_26" select="$primitiveTypes.String__subset_s2_in/self::node()"/>
			<xsl:if test="string($value_26)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_26"/>
				</xsl:attribute>
			</xsl:if>
		</suffix>
	</xsl:template>
	<xsl:template match="oms:XPN.2" mode="prim_m9">
		<xsl:variable name="primitiveTypes.String__subset_s1_in" select="."/>
		<given>
			<xsl:variable name="value_28" select="$primitiveTypes.String__subset_s1_in/self::node()"/>
			<xsl:if test="string($value_28)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_28"/>
				</xsl:attribute>
			</xsl:if>
		</given>
	</xsl:template>
	<xsl:template match="oms:XPN.1" mode="prim_m10">
		<xsl:variable name="primitiveTypes.String__in" select="."/>
		<family>
			<xsl:variable name="value_30" select="$primitiveTypes.String__in/oms:FN.1"/>
			<xsl:if test="string($value_30)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_30"/>
				</xsl:attribute>
			</xsl:if>
		</family>
	</xsl:template>
	<xsl:template match="oms:PID.11" mode="comp_m11">
		<xsl:variable name="complexTypes.Address_in" select="."/>
		<address>
			<xsl:variable name="country_32" select="$complexTypes.Address_in/oms:XAD.6"/>
			<xsl:variable name="zip_34" select="$complexTypes.Address_in/oms:XAD.5"/>
			<xsl:variable name="v_36" select="$complexTypes.Address_in/oms:XAD.1"/>
			<xsl:variable name="primitiveTypes.String__subset_s4_in_s21" select="$v_36/self::node()"/>
			<xsl:variable name="state_38" select="$complexTypes.Address_in/oms:XAD.4"/>
			<xsl:variable name="city_40" select="$complexTypes.Address_in/oms:XAD.3"/>
			<xsl:if test="string($country_32)">
				<xsl:call-template name="country_14">
					<xsl:with-param name="complexTypes.Address_in" select="$complexTypes.Address_in"/>
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($zip_34)">
				<xsl:call-template name="zip_15">
					<xsl:with-param name="complexTypes.Address_in" select="$complexTypes.Address_in"/>
				</xsl:call-template>
			</xsl:if>
			<xsl:apply-templates mode="prim_m12" select="$primitiveTypes.String__subset_s4_in_s21"/>
			<xsl:if test="string($state_38)">
				<xsl:call-template name="state_16">
					<xsl:with-param name="complexTypes.Address_in" select="$complexTypes.Address_in"/>
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($city_40)">
				<xsl:call-template name="city_17">
					<xsl:with-param name="complexTypes.Address_in" select="$complexTypes.Address_in"/>
				</xsl:call-template>
			</xsl:if>
		</address>
	</xsl:template>
	<xsl:template name="country_14">
		<xsl:param name="complexTypes.Address_in"/>
		<country>
			<xsl:variable name="country_33" select="$complexTypes.Address_in/oms:XAD.6"/>
			<xsl:if test="string($country_33)">
				<xsl:attribute name="value">
					<xsl:value-of select="$country_33"/>
				</xsl:attribute>
			</xsl:if>
		</country>
	</xsl:template>
	<xsl:template name="zip_15">
		<xsl:param name="complexTypes.Address_in"/>
		<zip>
			<xsl:variable name="zip_35" select="$complexTypes.Address_in/oms:XAD.5"/>
			<xsl:if test="string($zip_35)">
				<xsl:attribute name="value">
					<xsl:value-of select="$zip_35"/>
				</xsl:attribute>
			</xsl:if>
		</zip>
	</xsl:template>
	<xsl:template match="oms:XAD.1" mode="prim_m12">
		<xsl:variable name="primitiveTypes.String__subset_s4_in" select="."/>
		<line>
			<xsl:variable name="value_37" select="$primitiveTypes.String__subset_s4_in/oms:SAD.1"/>
			<xsl:if test="string($value_37)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_37"/>
				</xsl:attribute>
			</xsl:if>
		</line>
	</xsl:template>
	<xsl:template name="state_16">
		<xsl:param name="complexTypes.Address_in"/>
		<state>
			<xsl:variable name="state_39" select="$complexTypes.Address_in/oms:XAD.4"/>
			<xsl:if test="string($state_39)">
				<xsl:attribute name="value">
					<xsl:value-of select="$state_39"/>
				</xsl:attribute>
			</xsl:if>
		</state>
	</xsl:template>
	<xsl:template name="city_17">
		<xsl:param name="complexTypes.Address_in"/>
		<city>
			<xsl:variable name="city_41" select="$complexTypes.Address_in/oms:XAD.3"/>
			<xsl:if test="string($city_41)">
				<xsl:attribute name="value">
					<xsl:value-of select="$city_41"/>
				</xsl:attribute>
			</xsl:if>
		</city>
	</xsl:template>
	<xsl:variable name="inWrapper_result" select="."/>
	<xsl:variable name="main_result">
		<xsl:apply-templates mode="main" select="$inWrapper_result"/>
	</xsl:variable>
	<xsl:template match="/">
		<xsl:apply-templates mode="outWrapper" select="$main_result"/>
	</xsl:template>
	<xsl:template match="*" mode="outWrapper">
		<xsl:copy>
			<xsl:copy-of select="@*"/>
			<xsl:apply-templates mode="outWrapper"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="a:entry_Location" mode="outWrapper" priority="1.2">
		<a:entry>
			<xsl:copy-of select="@*"/>
			<xsl:apply-templates mode="outWrapper"/>
		</a:entry>
	</xsl:template>
	<xsl:template match="a:entry_Organization" mode="outWrapper" priority="1.2">
		<a:entry>
			<xsl:copy-of select="@*"/>
			<xsl:apply-templates mode="outWrapper"/>
		</a:entry>
	</xsl:template>
	<xsl:template match="a:entry_Practitioner" mode="outWrapper" priority="1.2">
		<a:entry>
			<xsl:copy-of select="@*"/>
			<xsl:apply-templates mode="outWrapper"/>
		</a:entry>
	</xsl:template>
	<xsl:template match="a:entry_Patient" mode="outWrapper" priority="1.2">
		<a:entry>
			<xsl:copy-of select="@*"/>
			<xsl:apply-templates mode="outWrapper"/>
		</a:entry>
	</xsl:template>
</xsl:stylesheet>
