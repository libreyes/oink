<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns="http://hl7.org/fhir" xmlns:a="http://www.w3.org/2005/Atom" xmlns:oms="urn:hl7-org:v2xml"
	xmlns:x="http://www.w3.org/1999/xhtml" version="2.0">
	<xsl:output indent="yes" method="xml" />
	<!-- This stylesheet was generated by the Open Mapping Tools, from Open Mapping Software Ltd., www.OpenMapSW.com. -->
	<xsl:template match="*" mode="test">
		<xsl:variable name="vTest" select="." />
		<xsl:message>local
			name: [&lt;xsl:value-of select='local-name()'/&gt;]
		</xsl:message>
		<xsl:message>namespace
			uri: [&lt;xsl:value-of select='namespace-uri()''/&gt;]
		</xsl:message>
	</xsl:template>
	<xsl:template match="/oms:ADR_A19" mode="main">
		<!--WProc template for path empty path -->
		<xsl:variable name="v_1" select="/oms:ADR_A19" />
		<xsl:apply-templates mode="feed_m1" select="$v_1" />
	</xsl:template>
	<xsl:template match="oms:ADR_A19" mode="feed_m1">
		<!--WProc template for path /a:feed -->
		<xsl:variable name="feed.AtomFeed_in" select="." />
		<a:feed>
			<xsl:variable name="v_8" select="$feed.AtomFeed_in/oms:ADR_A19.QUERY_RESPONSE/oms:PID" />
			<xsl:variable name="resources.Patient_in" select="$v_8/self::node()" />
			<xsl:variable name="v_121" select="$feed.AtomFeed_in/oms:ADR_A19.QUERY_RESPONSE/oms:PD1/oms:PD1.3" />
			<xsl:variable name="resources.Organization_in" select="$v_121/self::node()" />
			<xsl:variable name="v_137" select="$feed.AtomFeed_in/oms:ADR_A19.QUERY_RESPONSE/oms:PD1/oms:PD1.4" />
			<xsl:variable name="resources.Practitioner_in" select="$v_137/self::node()" />
			<xsl:call-template name="a:authorName_1" />
			<xsl:call-template name="a:authorUri_2" />
			<xsl:call-template name="a:id_3" />
			<xsl:call-template name="a:title_4" />
			<xsl:call-template name="a:updated_5">
				<xsl:with-param name="feed.AtomFeed_in" select="$feed.AtomFeed_in" />
			</xsl:call-template>
			<xsl:apply-templates mode="reso_m2" select="$resources.Patient_in" />
			<xsl:apply-templates mode="reso_m34" select="$resources.Organization_in" />
			<xsl:apply-templates mode="reso_m38" select="$resources.Practitioner_in" />
		</a:feed>
	</xsl:template>
	<xsl:template name="a:authorName_1">
		<!--WProc template for path /a:feed/a:authorName -->
		<a:authorName>
			<xsl:variable name="authorName_2" select="'OpenEyes transform software'" />
			<xsl:value-of select="$authorName_2" />
		</a:authorName>
	</xsl:template>
	<xsl:template name="a:authorUri_2">
		<!--WProc template for path /a:feed/a:authorUri -->
		<a:authorUri>
			<xsl:variable name="authorUri_3" select="'http://OpenEyes.org'" />
			<xsl:value-of select="$authorUri_3" />
		</a:authorUri>
	</xsl:template>
	<xsl:template name="a:id_3">
		<!--WProc template for path /a:feed/a:id -->
		<a:id>
			<xsl:variable name="id_4" select="'12345'" />
			<xsl:value-of select="$id_4" />
		</a:id>
	</xsl:template>
	<xsl:template name="a:title_4">
		<!--WProc template for path /a:feed/a:title -->
		<a:title>
			<xsl:variable name="title_5" select="'FHIR Patient Bundle from V2 ADR_A19'" />
			<xsl:value-of select="$title_5" />
		</a:title>
	</xsl:template>
	<xsl:template name="a:updated_5">
		<xsl:param name="feed.AtomFeed_in" />
		<!--WProc template for path /a:feed/a:updated -->
		<a:updated>
			<xsl:variable name="updated_7" select="$feed.AtomFeed_in/self::node()" />
			<xsl:variable name="v_6">
				<xsl:call-template name="in_makeUpdatedTime">
					<xsl:with-param name="updated" select="$updated_7" />
				</xsl:call-template>
			</xsl:variable>
			<xsl:value-of select="$v_6" />
		</a:updated>
	</xsl:template>
	<xsl:template match="oms:PID" mode="reso_m2">
		<!--WProc template for path /a:feed/a:entry_Patient -->
		<xsl:variable name="resources.Patient_in" select="." />
		<a:entry_Patient>
			<xsl:call-template name="a:id_6">
				<xsl:with-param name="resources.Patient_in" select="$resources.Patient_in" />
			</xsl:call-template>
			<xsl:call-template name="a:content_7">
				<xsl:with-param name="resources.Patient_in" select="$resources.Patient_in" />
			</xsl:call-template>
		</a:entry_Patient>
	</xsl:template>
	<xsl:template name="a:id_6">
		<xsl:param name="resources.Patient_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:id -->
		<a:id>
			<xsl:variable name="fhir_id_9" select="$resources.Patient_in/oms:PID.3/oms:CX.1[(parent::node()/oms:CX.5 = 'PAS')]" />
			<xsl:value-of select="$fhir_id_9" />
		</a:id>
	</xsl:template>
	<xsl:template name="a:content_7">
		<xsl:param name="resources.Patient_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content -->
		<a:content>
			<xsl:variable name="v_10" select="'text/xml'" />
			<xsl:if test="string($v_10)">
				<xsl:attribute name="type">
					<xsl:value-of select="$v_10" />
				</xsl:attribute>
			</xsl:if>
			<xsl:call-template name="Patient_8">
				<xsl:with-param name="resources.Patient_in" select="$resources.Patient_in" />
			</xsl:call-template>
		</a:content>
	</xsl:template>
	<xsl:template name="Patient_8">
		<xsl:param name="resources.Patient_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient -->
		<Patient>
			<xsl:variable name="v_11" select="$resources.Patient_in/oms:PID.3" />
			<xsl:variable name="complexTypes.Identifier_in" select="$v_11/self::node()" />
			<xsl:variable name="deceasedBo_17" select="$resources.Patient_in/oms:PID.30" />
			<xsl:variable name="v_16">
				<xsl:call-template name="in_convertBoolean">
					<xsl:with-param name="deceasedBoolean" select="$deceasedBo_17" />
				</xsl:call-template>
			</xsl:variable>
			<xsl:variable name="v_20" select="$resources.Patient_in/oms:PID.8" />
			<xsl:variable name="complexTypes.CodeableConcept_in" select="$v_20/self::node()" />
			<xsl:variable name="birthDate_27" select="$resources.Patient_in/oms:PID.7/oms:TS.1" />
			<xsl:variable name="v_26">
				<xsl:call-template name="in_convertDateOfBirth_in">
					<xsl:with-param name="birthDate" select="$birthDate_27" />
				</xsl:call-template>
			</xsl:variable>
			<xsl:variable name="v_30" select="$resources.Patient_in/oms:PID.13" />
			<xsl:variable name="complexTypes.Contact_in" select="$v_30/self::node()" />
			<xsl:variable name="v_35" select="$resources.Patient_in/ancestor::oms:ADR_A19.QUERY_RESPONSE/oms:NK1" />
			<xsl:variable name="components.PatientContactComponent_in" select="$v_35/self::node()" />
			<xsl:variable name="v_83" select="$resources.Patient_in/oms:PID.5" />
			<xsl:variable name="complexTypes.HumanName_in" select="$v_83/self::node()" />
			<xsl:variable name="v_92" select="$resources.Patient_in/ancestor::oms:ADR_A19.QUERY_RESPONSE/oms:PD1/oms:PD1.4/oms:XCN.1" />
			<xsl:variable name="v_93" select="$v_92/ancestor::oms:PD1.4" />
			<xsl:variable name="v_94" select="$v_93/self::node()" />
			<xsl:variable name="feed.AtomFeed_in" select="($v_94/ancestor::oms:ADR_A19)[1]" />
			<xsl:variable name="resources.Practitioner_in" select="$v_93/self::node()[($feed.AtomFeed_in)]" />
			<xsl:variable name="v_100" select="$resources.Patient_in/ancestor::oms:ADR_A19.QUERY_RESPONSE/oms:PD1/oms:PD1.3/oms:XON.3" />
			<xsl:variable name="v_101" select="$v_100/ancestor::oms:PD1.3" />
			<xsl:variable name="v_102" select="$v_101/self::node()" />
			<xsl:variable name="feed.AtomFeed_in" select="($v_102/ancestor::oms:ADR_A19)[1]" />
			<xsl:variable name="resources.Organization_in" select="$v_101/self::node()[($feed.AtomFeed_in)]" />
			<xsl:variable name="v_108" select="$resources.Patient_in/oms:PID.11" />
			<xsl:variable name="complexTypes.Address_in" select="$v_108/self::node()" />
			<xsl:apply-templates mode="comp_m3" select="$complexTypes.Identifier_in" />
			<xsl:if test="string($v_16)">
				<xsl:call-template name="deceasedBoolean_11">
					<xsl:with-param name="resources.Patient_in" select="$resources.Patient_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:apply-templates mode="comp_m4" select="$complexTypes.CodeableConcept_in" />
			<xsl:if test="string($v_26)">
				<xsl:call-template name="birthDate_14">
					<xsl:with-param name="resources.Patient_in" select="$resources.Patient_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:apply-templates mode="comp_m6" select="$complexTypes.Contact_in" />
			<xsl:apply-templates mode="comp_m7" select="$components.PatientContactComponent_in" />
			<xsl:apply-templates mode="comp_m22" select="$complexTypes.HumanName_in" />
			<xsl:apply-templates mode="reso_m27" select="$resources.Practitioner_in">
				<xsl:with-param name="resources.Patient_in" select="$resources.Patient_in" />
			</xsl:apply-templates>
			<xsl:apply-templates mode="reso_m29" select="$resources.Organization_in">
				<xsl:with-param name="resources.Patient_in" select="$resources.Patient_in" />
			</xsl:apply-templates>
			<xsl:apply-templates mode="comp_m31" select="$complexTypes.Address_in" />
		</Patient>
	</xsl:template>
	<xsl:template match="oms:PID.3" mode="comp_m3">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/identifier -->
		<xsl:variable name="complexTypes.Identifier_in" select="." />
		<identifier>
			<xsl:variable name="value_12" select="$complexTypes.Identifier_in/oms:CX.1" />
			<xsl:variable name="system_14" select="$complexTypes.Identifier_in/oms:CX.5" />
			<xsl:if test="string($value_12)">
				<xsl:call-template name="value_9">
					<xsl:with-param name="complexTypes.Identifier_in" select="$complexTypes.Identifier_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($system_14)">
				<xsl:call-template name="system_10">
					<xsl:with-param name="complexTypes.Identifier_in" select="$complexTypes.Identifier_in" />
				</xsl:call-template>
			</xsl:if>
		</identifier>
	</xsl:template>
	<xsl:template name="value_9">
		<xsl:param name="complexTypes.Identifier_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/identifier/value -->
		<value>
			<xsl:variable name="value_13" select="$complexTypes.Identifier_in/oms:CX.1" />
			<xsl:if test="string($value_13)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_13" />
				</xsl:attribute>
			</xsl:if>
		</value>
	</xsl:template>
	<xsl:template name="system_10">
		<xsl:param name="complexTypes.Identifier_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/identifier/system -->
		<system>
			<xsl:variable name="system_15" select="$complexTypes.Identifier_in/oms:CX.5" />
			<xsl:if test="string($system_15)">
				<xsl:attribute name="value">
					<xsl:value-of select="$system_15" />
				</xsl:attribute>
			</xsl:if>
		</system>
	</xsl:template>
	<xsl:template name="deceasedBoolean_11">
		<xsl:param name="resources.Patient_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/deceasedBoolean -->
		<deceasedBoolean>
			<xsl:variable name="deceasedBo_19" select="$resources.Patient_in/oms:PID.30" />
			<xsl:variable name="v_18">
				<xsl:call-template name="in_convertBoolean">
					<xsl:with-param name="deceasedBoolean" select="$deceasedBo_19" />
				</xsl:call-template>
			</xsl:variable>
			<xsl:if test="string($v_18)">
				<xsl:attribute name="value">
					<xsl:value-of select="$v_18" />
				</xsl:attribute>
			</xsl:if>
		</deceasedBoolean>
	</xsl:template>
	<xsl:template match="oms:PID.8" mode="comp_m4">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/gender -->
		<xsl:variable name="complexTypes.CodeableConcept_in" select="." />
		<gender>
			<xsl:variable name="v_21" select="$complexTypes.CodeableConcept_in/self::node()" />
			<xsl:variable name="complexTypes.Coding_in" select="$v_21/self::node()" />
			<xsl:apply-templates mode="comp_m5" select="$complexTypes.Coding_in" />
		</gender>
	</xsl:template>
	<xsl:template match="oms:PID.8" mode="comp_m5">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/gender/coding -->
		<xsl:variable name="complexTypes.Coding_in" select="." />
		<coding>
			<xsl:variable name="code_22" select="$complexTypes.Coding_in/self::node()" />
			<xsl:variable name="system_24" select="'http://hl7.org/fhir/v3/AdministrativeGender'" />
			<xsl:if test="string($code_22)">
				<xsl:call-template name="code_12">
					<xsl:with-param name="complexTypes.Coding_in" select="$complexTypes.Coding_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($system_24)">
				<xsl:call-template name="system_13" />
			</xsl:if>
		</coding>
	</xsl:template>
	<xsl:template name="code_12">
		<xsl:param name="complexTypes.Coding_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/gender/coding/code -->
		<code>
			<xsl:variable name="code_23" select="$complexTypes.Coding_in/self::node()" />
			<xsl:if test="string($code_23)">
				<xsl:attribute name="value">
					<xsl:value-of select="$code_23" />
				</xsl:attribute>
			</xsl:if>
		</code>
	</xsl:template>
	<xsl:template name="system_13">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/gender/coding/system -->
		<system>
			<xsl:variable name="system_25" select="'http://hl7.org/fhir/v3/AdministrativeGender'" />
			<xsl:if test="string($system_25)">
				<xsl:attribute name="value">
					<xsl:value-of select="$system_25" />
				</xsl:attribute>
			</xsl:if>
		</system>
	</xsl:template>
	<xsl:template name="birthDate_14">
		<xsl:param name="resources.Patient_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/birthDate -->
		<birthDate>
			<xsl:variable name="birthDate_29" select="$resources.Patient_in/oms:PID.7/oms:TS.1" />
			<xsl:variable name="v_28">
				<xsl:call-template name="in_convertDateOfBirth_in">
					<xsl:with-param name="birthDate" select="$birthDate_29" />
				</xsl:call-template>
			</xsl:variable>
			<xsl:if test="string($v_28)">
				<xsl:attribute name="value">
					<xsl:value-of select="$v_28" />
				</xsl:attribute>
			</xsl:if>
		</birthDate>
	</xsl:template>
	<xsl:template match="oms:PID.13" mode="comp_m6">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/telecom -->
		<xsl:variable name="complexTypes.Contact_in" select="." />
		<telecom>
			<xsl:variable name="value_31" select="$complexTypes.Contact_in/oms:XTN.1" />
			<xsl:variable name="use_33" select="'home'" />
			<xsl:if test="string($value_31)">
				<xsl:call-template name="value_15">
					<xsl:with-param name="complexTypes.Contact_in" select="$complexTypes.Contact_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($use_33)">
				<xsl:call-template name="use_16" />
			</xsl:if>
		</telecom>
	</xsl:template>
	<xsl:template name="value_15">
		<xsl:param name="complexTypes.Contact_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/telecom/value -->
		<value>
			<xsl:variable name="value_32" select="$complexTypes.Contact_in/oms:XTN.1" />
			<xsl:if test="string($value_32)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_32" />
				</xsl:attribute>
			</xsl:if>
		</value>
	</xsl:template>
	<xsl:template name="use_16">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/telecom/use -->
		<use>
			<xsl:variable name="use_34" select="'home'" />
			<xsl:if test="string($use_34)">
				<xsl:attribute name="value">
					<xsl:value-of select="$use_34" />
				</xsl:attribute>
			</xsl:if>
		</use>
	</xsl:template>
	<xsl:template match="oms:NK1" mode="comp_m7">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact -->
		<xsl:variable name="components.PatientContactComponent_in" select="." />
		<contact>
			<xsl:variable name="v_36" select="$components.PatientContactComponent_in/oms:NK1.4" />
			<xsl:variable name="complexTypes.Address_in" select="$v_36/self::node()" />
			<xsl:variable name="v_51" select="$components.PatientContactComponent_in/oms:NK1.2" />
			<xsl:variable name="complexTypes.HumanName_subset_s1_in" select="$v_51/self::node()" />
			<xsl:variable name="v_62" select="$components.PatientContactComponent_in/oms:NK1.15" />
			<xsl:variable name="complexTypes.CodeableConcept_subset_s3_in" select="$v_62/self::node()" />
			<xsl:variable name="v_68" select="$components.PatientContactComponent_in/oms:NK1.5" />
			<xsl:variable name="complexTypes.Contact_in" select="$v_68/self::node()" />
			<xsl:variable name="v_73" select="$components.PatientContactComponent_in/oms:NK1.7" />
			<xsl:variable name="complexTypes.CodeableConcept_subset_s2_in" select="$v_73/self::node()" />
			<xsl:apply-templates mode="comp_m8" select="$complexTypes.Address_in" />
			<xsl:apply-templates mode="comp_m11" select="$complexTypes.HumanName_subset_s1_in" />
			<xsl:apply-templates mode="comp_m17" select="$complexTypes.CodeableConcept_subset_s3_in" />
			<xsl:apply-templates mode="comp_m19" select="$complexTypes.Contact_in" />
			<xsl:apply-templates mode="comp_m20" select="$complexTypes.CodeableConcept_subset_s2_in" />
		</contact>
	</xsl:template>
	<xsl:template match="oms:NK1.4" mode="comp_m8">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/address -->
		<xsl:variable name="complexTypes.Address_in" select="." />
		<address>
			<xsl:variable name="country_37" select="$complexTypes.Address_in/oms:XAD.6" />
			<xsl:variable name="use_39" select="$complexTypes.Address_in/oms:XAD.7" />
			<xsl:variable name="zip_41" select="$complexTypes.Address_in/oms:XAD.5" />
			<xsl:variable name="v_43" select="$complexTypes.Address_in/oms:XAD.1" />
			<xsl:variable name="primitiveTypes.String__subset_s8_in" select="$v_43/self::node()" />
			<xsl:variable name="v_45" select="$complexTypes.Address_in/oms:XAD.2" />
			<xsl:variable name="primitiveTypes.String__subset_s9_in" select="$v_45/self::node()" />
			<xsl:variable name="state_47" select="$complexTypes.Address_in/oms:XAD.4" />
			<xsl:variable name="city_49" select="$complexTypes.Address_in/oms:XAD.3" />
			<xsl:if test="string($country_37)">
				<xsl:call-template name="country_17">
					<xsl:with-param name="complexTypes.Address_in" select="$complexTypes.Address_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($use_39)">
				<xsl:call-template name="use_18">
					<xsl:with-param name="complexTypes.Address_in" select="$complexTypes.Address_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($zip_41)">
				<xsl:call-template name="zip_19">
					<xsl:with-param name="complexTypes.Address_in" select="$complexTypes.Address_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:apply-templates mode="prim_m9" select="$primitiveTypes.String__subset_s8_in" />
			<xsl:apply-templates mode="prim_m10" select="$primitiveTypes.String__subset_s9_in" />
			<xsl:if test="string($state_47)">
				<xsl:call-template name="state_20">
					<xsl:with-param name="complexTypes.Address_in" select="$complexTypes.Address_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($city_49)">
				<xsl:call-template name="city_21">
					<xsl:with-param name="complexTypes.Address_in" select="$complexTypes.Address_in" />
				</xsl:call-template>
			</xsl:if>
		</address>
	</xsl:template>
	<xsl:template name="country_17">
		<xsl:param name="complexTypes.Address_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/address/country -->
		<country>
			<xsl:variable name="country_38" select="$complexTypes.Address_in/oms:XAD.6" />
			<xsl:if test="string($country_38)">
				<xsl:attribute name="value">
					<xsl:value-of select="$country_38" />
				</xsl:attribute>
			</xsl:if>
		</country>
	</xsl:template>
	<xsl:template name="use_18">
		<xsl:param name="complexTypes.Address_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/address/use -->
		<use>
			<xsl:variable name="use_40" select="$complexTypes.Address_in/oms:XAD.7" />
			<xsl:if test="string($use_40)">
				<xsl:attribute name="value">
					<xsl:value-of select="$use_40" />
				</xsl:attribute>
			</xsl:if>
		</use>
	</xsl:template>
	<xsl:template name="zip_19">
		<xsl:param name="complexTypes.Address_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/address/zip -->
		<zip>
			<xsl:variable name="zip_42" select="$complexTypes.Address_in/oms:XAD.5" />
			<xsl:if test="string($zip_42)">
				<xsl:attribute name="value">
					<xsl:value-of select="$zip_42" />
				</xsl:attribute>
			</xsl:if>
		</zip>
	</xsl:template>
	<xsl:template match="oms:XAD.1" mode="prim_m9">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/address/line -->
		<xsl:variable name="primitiveTypes.String__subset_s8_in" select="." />
		<line>
			<xsl:variable name="value_44" select="$primitiveTypes.String__subset_s8_in/oms:SAD.1" />
			<xsl:if test="string($value_44)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_44" />
				</xsl:attribute>
			</xsl:if>
		</line>
	</xsl:template>
	<xsl:template match="oms:XAD.2" mode="prim_m10">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/address/line -->
		<xsl:variable name="primitiveTypes.String__subset_s9_in" select="." />
		<line>
			<xsl:variable name="value_46" select="$primitiveTypes.String__subset_s9_in/self::node()" />
			<xsl:if test="string($value_46)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_46" />
				</xsl:attribute>
			</xsl:if>
		</line>
	</xsl:template>
	<xsl:template name="state_20">
		<xsl:param name="complexTypes.Address_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/address/state -->
		<state>
			<xsl:variable name="state_48" select="$complexTypes.Address_in/oms:XAD.4" />
			<xsl:if test="string($state_48)">
				<xsl:attribute name="value">
					<xsl:value-of select="$state_48" />
				</xsl:attribute>
			</xsl:if>
		</state>
	</xsl:template>
	<xsl:template name="city_21">
		<xsl:param name="complexTypes.Address_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/address/city -->
		<city>
			<xsl:variable name="city_50" select="$complexTypes.Address_in/oms:XAD.3" />
			<xsl:if test="string($city_50)">
				<xsl:attribute name="value">
					<xsl:value-of select="$city_50" />
				</xsl:attribute>
			</xsl:if>
		</city>
	</xsl:template>
	<xsl:template match="oms:NK1.2" mode="comp_m11">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/name -->
		<xsl:variable name="complexTypes.HumanName_subset_s1_in" select="." />
		<name>
			<xsl:variable name="v_52" select="$complexTypes.HumanName_subset_s1_in/oms:XPN.5" />
			<xsl:variable name="primitiveTypes.String__subset_s7_in" select="$v_52/self::node()" />
			<xsl:variable name="v_54" select="$complexTypes.HumanName_subset_s1_in/oms:XPN.4" />
			<xsl:variable name="primitiveTypes.String__subset_s6_in" select="$v_54/self::node()" />
			<xsl:variable name="v_56" select="$complexTypes.HumanName_subset_s1_in/oms:XPN.2" />
			<xsl:variable name="primitiveTypes.String__subset_s4_in" select="$v_56/self::node()" />
			<xsl:variable name="v_58" select="$complexTypes.HumanName_subset_s1_in/oms:XPN.3" />
			<xsl:variable name="primitiveTypes.String__subset_s5_in" select="$v_58/self::node()" />
			<xsl:variable name="v_60" select="$complexTypes.HumanName_subset_s1_in/oms:XPN.1/oms:FN.1" />
			<xsl:variable name="primitiveTypes.String__subset_s3_in" select="$v_60/self::node()" />
			<xsl:apply-templates mode="prim_m12" select="$primitiveTypes.String__subset_s7_in" />
			<xsl:apply-templates mode="prim_m13" select="$primitiveTypes.String__subset_s6_in" />
			<xsl:apply-templates mode="prim_m14" select="$primitiveTypes.String__subset_s4_in" />
			<xsl:apply-templates mode="prim_m15" select="$primitiveTypes.String__subset_s5_in" />
			<xsl:apply-templates mode="prim_m16" select="$primitiveTypes.String__subset_s3_in" />
		</name>
	</xsl:template>
	<xsl:template match="oms:XPN.5" mode="prim_m12">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/name/prefix -->
		<xsl:variable name="primitiveTypes.String__subset_s7_in" select="." />
		<prefix>
			<xsl:variable name="value_53" select="$primitiveTypes.String__subset_s7_in/self::node()" />
			<xsl:if test="string($value_53)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_53" />
				</xsl:attribute>
			</xsl:if>
		</prefix>
	</xsl:template>
	<xsl:template match="oms:XPN.4" mode="prim_m13">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/name/suffix -->
		<xsl:variable name="primitiveTypes.String__subset_s6_in" select="." />
		<suffix>
			<xsl:variable name="value_55" select="$primitiveTypes.String__subset_s6_in/self::node()" />
			<xsl:if test="string($value_55)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_55" />
				</xsl:attribute>
			</xsl:if>
		</suffix>
	</xsl:template>
	<xsl:template match="oms:XPN.2" mode="prim_m14">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/name/given -->
		<xsl:variable name="primitiveTypes.String__subset_s4_in" select="." />
		<given>
			<xsl:variable name="value_57" select="$primitiveTypes.String__subset_s4_in/self::node()" />
			<xsl:if test="string($value_57)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_57" />
				</xsl:attribute>
			</xsl:if>
		</given>
	</xsl:template>
	<xsl:template match="oms:XPN.3" mode="prim_m15">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/name/given -->
		<xsl:variable name="primitiveTypes.String__subset_s5_in" select="." />
		<given>
			<xsl:variable name="value_59" select="$primitiveTypes.String__subset_s5_in/self::node()" />
			<xsl:if test="string($value_59)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_59" />
				</xsl:attribute>
			</xsl:if>
		</given>
	</xsl:template>
	<xsl:template match="oms:FN.1" mode="prim_m16">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/name/family -->
		<xsl:variable name="primitiveTypes.String__subset_s3_in" select="." />
		<family>
			<xsl:variable name="value_61" select="$primitiveTypes.String__subset_s3_in/self::node()" />
			<xsl:if test="string($value_61)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_61" />
				</xsl:attribute>
			</xsl:if>
		</family>
	</xsl:template>
	<xsl:template match="oms:NK1.15" mode="comp_m17">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/gender -->
		<xsl:variable name="complexTypes.CodeableConcept_subset_s3_in" select="." />
		<gender>
			<xsl:variable name="v_63" select="$complexTypes.CodeableConcept_subset_s3_in/self::node()" />
			<xsl:variable name="complexTypes.Coding_subset_s3_in" select="$v_63/self::node()" />
			<xsl:apply-templates mode="comp_m18" select="$complexTypes.Coding_subset_s3_in" />
		</gender>
	</xsl:template>
	<xsl:template match="oms:NK1.15" mode="comp_m18">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/gender/coding -->
		<xsl:variable name="complexTypes.Coding_subset_s3_in" select="." />
		<coding>
			<xsl:variable name="code_64" select="$complexTypes.Coding_subset_s3_in/self::node()" />
			<xsl:variable name="system_66" select="'http://hl7.org/fhir/v3/AdministrativeGender'" />
			<xsl:if test="string($code_64)">
				<xsl:call-template name="code_22">
					<xsl:with-param name="complexTypes.Coding_subset_s3_in" select="$complexTypes.Coding_subset_s3_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($system_66)">
				<xsl:call-template name="system_23" />
			</xsl:if>
		</coding>
	</xsl:template>
	<xsl:template name="code_22">
		<xsl:param name="complexTypes.Coding_subset_s3_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/gender/coding/code -->
		<code>
			<xsl:variable name="code_65" select="$complexTypes.Coding_subset_s3_in/self::node()" />
			<xsl:if test="string($code_65)">
				<xsl:attribute name="value">
					<xsl:value-of select="$code_65" />
				</xsl:attribute>
			</xsl:if>
		</code>
	</xsl:template>
	<xsl:template name="system_23">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/gender/coding/system -->
		<system>
			<xsl:variable name="system_67" select="'http://hl7.org/fhir/v3/AdministrativeGender'" />
			<xsl:if test="string($system_67)">
				<xsl:attribute name="value">
					<xsl:value-of select="$system_67" />
				</xsl:attribute>
			</xsl:if>
		</system>
	</xsl:template>
	<xsl:template match="oms:NK1.5" mode="comp_m19">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/telecom -->
		<xsl:variable name="complexTypes.Contact_in" select="." />
		<telecom>
			<xsl:variable name="value_69" select="$complexTypes.Contact_in/oms:XTN.1" />
			<xsl:variable name="use_71" select="$complexTypes.Contact_in/oms:XTN.2" />
			<xsl:if test="string($value_69)">
				<xsl:call-template name="value_24">
					<xsl:with-param name="complexTypes.Contact_in" select="$complexTypes.Contact_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($use_71)">
				<xsl:call-template name="use_25">
					<xsl:with-param name="complexTypes.Contact_in" select="$complexTypes.Contact_in" />
				</xsl:call-template>
			</xsl:if>
		</telecom>
	</xsl:template>
	<xsl:template name="value_24">
		<xsl:param name="complexTypes.Contact_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/telecom/value -->
		<value>
			<xsl:variable name="value_70" select="$complexTypes.Contact_in/oms:XTN.1" />
			<xsl:if test="string($value_70)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_70" />
				</xsl:attribute>
			</xsl:if>
		</value>
	</xsl:template>
	<xsl:template name="use_25">
		<xsl:param name="complexTypes.Contact_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/telecom/use -->
		<use>
			<xsl:variable name="use_72" select="$complexTypes.Contact_in/oms:XTN.2" />
			<xsl:if test="string($use_72)">
				<xsl:attribute name="value">
					<xsl:value-of select="$use_72" />
				</xsl:attribute>
			</xsl:if>
		</use>
	</xsl:template>
	<xsl:template match="oms:NK1.7" mode="comp_m20">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/relationship -->
		<xsl:variable name="complexTypes.CodeableConcept_subset_s2_in" select="." />
		<relationship>
			<xsl:variable name="v_74" select="$complexTypes.CodeableConcept_subset_s2_in/self::node()" />
			<xsl:variable name="complexTypes.Coding_subset_s2_in" select="$v_74/self::node()" />
			<xsl:apply-templates mode="comp_m21" select="$complexTypes.Coding_subset_s2_in" />
		</relationship>
	</xsl:template>
	<xsl:template match="oms:NK1.7" mode="comp_m21">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/relationship/coding -->
		<xsl:variable name="complexTypes.Coding_subset_s2_in" select="." />
		<coding>
			<xsl:variable name="display_75" select="$complexTypes.Coding_subset_s2_in/oms:CE.2" />
			<xsl:variable name="code_78" select="$complexTypes.Coding_subset_s2_in/oms:CE.1" />
			<xsl:variable name="v_77">
				<xsl:call-template name="in_convertRelationship">
					<xsl:with-param name="code" select="$code_78" />
				</xsl:call-template>
			</xsl:variable>
			<xsl:variable name="system_81" select="'http://hl7.org/fhir/patient-contact-relationship'" />
			<xsl:if test="string($display_75)">
				<xsl:call-template name="display_26">
					<xsl:with-param name="complexTypes.Coding_subset_s2_in" select="$complexTypes.Coding_subset_s2_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($v_77)">
				<xsl:call-template name="code_27">
					<xsl:with-param name="complexTypes.Coding_subset_s2_in" select="$complexTypes.Coding_subset_s2_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($system_81)">
				<xsl:call-template name="system_28" />
			</xsl:if>
		</coding>
	</xsl:template>
	<xsl:template name="display_26">
		<xsl:param name="complexTypes.Coding_subset_s2_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/relationship/coding/display -->
		<display>
			<xsl:variable name="display_76" select="$complexTypes.Coding_subset_s2_in/oms:CE.2" />
			<xsl:if test="string($display_76)">
				<xsl:attribute name="value">
					<xsl:value-of select="$display_76" />
				</xsl:attribute>
			</xsl:if>
		</display>
	</xsl:template>
	<xsl:template name="code_27">
		<xsl:param name="complexTypes.Coding_subset_s2_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/relationship/coding/code -->
		<code>
			<xsl:variable name="code_80" select="$complexTypes.Coding_subset_s2_in/oms:CE.1" />
			<xsl:variable name="v_79">
				<xsl:call-template name="in_convertRelationship">
					<xsl:with-param name="code" select="$code_80" />
				</xsl:call-template>
			</xsl:variable>
			<xsl:if test="string($v_79)">
				<xsl:attribute name="value">
					<xsl:value-of select="$v_79" />
				</xsl:attribute>
			</xsl:if>
		</code>
	</xsl:template>
	<xsl:template name="system_28">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/contact/relationship/coding/system -->
		<system>
			<xsl:variable name="system_82" select="'http://hl7.org/fhir/patient-contact-relationship'" />
			<xsl:if test="string($system_82)">
				<xsl:attribute name="value">
					<xsl:value-of select="$system_82" />
				</xsl:attribute>
			</xsl:if>
		</system>
	</xsl:template>
	<xsl:template match="oms:PID.5" mode="comp_m22">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/name -->
		<xsl:variable name="complexTypes.HumanName_in" select="." />
		<name>
			<xsl:variable name="v_84" select="$complexTypes.HumanName_in/oms:XPN.5" />
			<xsl:variable name="primitiveTypes.String__subset_s3_in" select="$v_84/self::node()" />
			<xsl:variable name="v_86" select="$complexTypes.HumanName_in/oms:XPN.4" />
			<xsl:variable name="primitiveTypes.String__subset_s2_in" select="$v_86/self::node()" />
			<xsl:variable name="v_88" select="$complexTypes.HumanName_in/oms:XPN.2" />
			<xsl:variable name="primitiveTypes.String__subset_s1_in" select="$v_88/self::node()" />
			<xsl:variable name="v_90" select="$complexTypes.HumanName_in/oms:XPN.1" />
			<xsl:variable name="primitiveTypes.String__in" select="$v_90/self::node()" />
			<xsl:apply-templates mode="prim_m23" select="$primitiveTypes.String__subset_s3_in" />
			<xsl:apply-templates mode="prim_m24" select="$primitiveTypes.String__subset_s2_in" />
			<xsl:apply-templates mode="prim_m25" select="$primitiveTypes.String__subset_s1_in" />
			<xsl:apply-templates mode="prim_m26" select="$primitiveTypes.String__in" />
		</name>
	</xsl:template>
	<xsl:template match="oms:XPN.5" mode="prim_m23">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/name/prefix -->
		<xsl:variable name="primitiveTypes.String__subset_s3_in" select="." />
		<prefix>
			<xsl:variable name="value_85" select="$primitiveTypes.String__subset_s3_in/self::node()" />
			<xsl:if test="string($value_85)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_85" />
				</xsl:attribute>
			</xsl:if>
		</prefix>
	</xsl:template>
	<xsl:template match="oms:XPN.4" mode="prim_m24">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/name/suffix -->
		<xsl:variable name="primitiveTypes.String__subset_s2_in" select="." />
		<suffix>
			<xsl:variable name="value_87" select="$primitiveTypes.String__subset_s2_in/self::node()" />
			<xsl:if test="string($value_87)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_87" />
				</xsl:attribute>
			</xsl:if>
		</suffix>
	</xsl:template>
	<xsl:template match="oms:XPN.2" mode="prim_m25">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/name/given -->
		<xsl:variable name="primitiveTypes.String__subset_s1_in" select="." />
		<given>
			<xsl:variable name="value_89" select="$primitiveTypes.String__subset_s1_in/self::node()" />
			<xsl:if test="string($value_89)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_89" />
				</xsl:attribute>
			</xsl:if>
		</given>
	</xsl:template>
	<xsl:template match="oms:XPN.1" mode="prim_m26">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/name/family -->
		<xsl:variable name="primitiveTypes.String__in" select="." />
		<family>
			<xsl:variable name="value_91" select="$primitiveTypes.String__in/oms:FN.1" />
			<xsl:if test="string($value_91)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_91" />
				</xsl:attribute>
			</xsl:if>
		</family>
	</xsl:template>
	<xsl:template match="oms:PD1.4" mode="reso_m27">
		<xsl:param name="resources.Patient_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/careProvider -->
		<xsl:variable name="resources.Practitioner_in" select="." />
		<careProvider>
			<xsl:call-template name="reference_29">
				<xsl:with-param name="resources.Patient_in" select="$resources.Patient_in" />
			</xsl:call-template>
		</careProvider>
	</xsl:template>
	<xsl:template name="reference_29">
		<xsl:param name="resources.Patient_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/careProvider/reference -->
		<reference>
			<xsl:variable name="v_95">
				<xsl:variable name="v_96" select="$resources.Patient_in/ancestor::oms:ADR_A19.QUERY_RESPONSE/oms:PD1/oms:PD1.4/oms:XCN.1" />
				<xsl:variable name="v_97" select="$v_96/ancestor::oms:PD1.4" />
				<xsl:variable name="v_98" select="$v_97/self::node()" />
				<xsl:variable name="feed.AtomFeed_in" select="($v_98/ancestor::oms:ADR_A19)[1]" />
				<xsl:variable name="resources.Practitioner_in" select="$v_97/self::node()[($feed.AtomFeed_in)]" />
				<xsl:apply-templates mode="reso_m28" select="$resources.Practitioner_in" />
			</xsl:variable>
			<xsl:if test="string($v_95)">
				<xsl:attribute name="value">
					<xsl:value-of select="$v_95" />
				</xsl:attribute>
			</xsl:if>
		</reference>
	</xsl:template>
	<xsl:template match="oms:PD1.4" mode="reso_m28">
		<!--Property template for property fhir_id of class resources.Practitioner -->
		<xsl:variable name="resources.Practitioner_in" select="." />
		<xsl:variable name="fhir_id_99" select="$resources.Practitioner_in/oms:XCN.1" />
		<xsl:value-of select="$fhir_id_99" />
	</xsl:template>
	<xsl:template match="oms:PD1.3" mode="reso_m29">
		<xsl:param name="resources.Patient_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/managingOrganization -->
		<xsl:variable name="resources.Organization_in" select="." />
		<managingOrganization>
			<xsl:call-template name="reference_30">
				<xsl:with-param name="resources.Patient_in" select="$resources.Patient_in" />
			</xsl:call-template>
		</managingOrganization>
	</xsl:template>
	<xsl:template name="reference_30">
		<xsl:param name="resources.Patient_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/managingOrganization/reference -->
		<reference>
			<xsl:variable name="v_103">
				<xsl:variable name="v_104" select="$resources.Patient_in/ancestor::oms:ADR_A19.QUERY_RESPONSE/oms:PD1/oms:PD1.3/oms:XON.3" />
				<xsl:variable name="v_105" select="$v_104/ancestor::oms:PD1.3" />
				<xsl:variable name="v_106" select="$v_105/self::node()" />
				<xsl:variable name="feed.AtomFeed_in" select="($v_106/ancestor::oms:ADR_A19)[1]" />
				<xsl:variable name="resources.Organization_in" select="$v_105/self::node()[($feed.AtomFeed_in)]" />
				<xsl:apply-templates mode="reso_m30" select="$resources.Organization_in" />
			</xsl:variable>
			<xsl:if test="string($v_103)">
				<xsl:attribute name="value">
					<xsl:value-of select="$v_103" />
				</xsl:attribute>
			</xsl:if>
		</reference>
	</xsl:template>
	<xsl:template match="oms:PD1.3" mode="reso_m30">
		<!--Property template for property fhir_id of class resources.Organization -->
		<xsl:variable name="resources.Organization_in" select="." />
		<xsl:variable name="fhir_id_107" select="$resources.Organization_in/oms:XON.3" />
		<xsl:value-of select="$fhir_id_107" />
	</xsl:template>
	<xsl:template match="oms:PID.11" mode="comp_m31">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/address -->
		<xsl:variable name="complexTypes.Address_in" select="." />
		<address>
			<xsl:variable name="country_109" select="$complexTypes.Address_in/oms:XAD.6" />
			<xsl:variable name="zip_111" select="$complexTypes.Address_in/oms:XAD.5" />
			<xsl:variable name="v_113" select="$complexTypes.Address_in/oms:XAD.1" />
			<xsl:variable name="primitiveTypes.String__subset_s4_in" select="$v_113/self::node()" />
			<xsl:variable name="v_115" select="$complexTypes.Address_in/oms:XAD.2" />
			<xsl:variable name="primitiveTypes.String__subset_s5_in" select="$v_115/self::node()" />
			<xsl:variable name="state_117" select="$complexTypes.Address_in/oms:XAD.4" />
			<xsl:variable name="city_119" select="$complexTypes.Address_in/oms:XAD.3" />
			<xsl:if test="string($country_109)">
				<xsl:call-template name="country_31">
					<xsl:with-param name="complexTypes.Address_in" select="$complexTypes.Address_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($zip_111)">
				<xsl:call-template name="zip_32">
					<xsl:with-param name="complexTypes.Address_in" select="$complexTypes.Address_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:apply-templates mode="prim_m32" select="$primitiveTypes.String__subset_s4_in" />
			<xsl:apply-templates mode="prim_m33" select="$primitiveTypes.String__subset_s5_in" />
			<xsl:if test="string($state_117)">
				<xsl:call-template name="state_33">
					<xsl:with-param name="complexTypes.Address_in" select="$complexTypes.Address_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($city_119)">
				<xsl:call-template name="city_34">
					<xsl:with-param name="complexTypes.Address_in" select="$complexTypes.Address_in" />
				</xsl:call-template>
			</xsl:if>
		</address>
	</xsl:template>
	<xsl:template name="country_31">
		<xsl:param name="complexTypes.Address_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/address/country -->
		<country>
			<xsl:variable name="country_110" select="$complexTypes.Address_in/oms:XAD.6" />
			<xsl:if test="string($country_110)">
				<xsl:attribute name="value">
					<xsl:value-of select="$country_110" />
				</xsl:attribute>
			</xsl:if>
		</country>
	</xsl:template>
	<xsl:template name="zip_32">
		<xsl:param name="complexTypes.Address_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/address/zip -->
		<zip>
			<xsl:variable name="zip_112" select="$complexTypes.Address_in/oms:XAD.5" />
			<xsl:if test="string($zip_112)">
				<xsl:attribute name="value">
					<xsl:value-of select="$zip_112" />
				</xsl:attribute>
			</xsl:if>
		</zip>
	</xsl:template>
	<xsl:template match="oms:XAD.1" mode="prim_m32">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/address/line -->
		<xsl:variable name="primitiveTypes.String__subset_s4_in" select="." />
		<line>
			<xsl:variable name="value_114" select="$primitiveTypes.String__subset_s4_in/oms:SAD.1" />
			<xsl:if test="string($value_114)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_114" />
				</xsl:attribute>
			</xsl:if>
		</line>
	</xsl:template>
	<xsl:template match="oms:XAD.2" mode="prim_m33">
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/address/line -->
		<xsl:variable name="primitiveTypes.String__subset_s5_in" select="." />
		<line>
			<xsl:variable name="value_116" select="$primitiveTypes.String__subset_s5_in/self::node()" />
			<xsl:if test="string($value_116)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_116" />
				</xsl:attribute>
			</xsl:if>
		</line>
	</xsl:template>
	<xsl:template name="state_33">
		<xsl:param name="complexTypes.Address_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/address/state -->
		<state>
			<xsl:variable name="state_118" select="$complexTypes.Address_in/oms:XAD.4" />
			<xsl:if test="string($state_118)">
				<xsl:attribute name="value">
					<xsl:value-of select="$state_118" />
				</xsl:attribute>
			</xsl:if>
		</state>
	</xsl:template>
	<xsl:template name="city_34">
		<xsl:param name="complexTypes.Address_in" />
		<!--WProc template for path /a:feed/a:entry_Patient/a:content/Patient/address/city -->
		<city>
			<xsl:variable name="city_120" select="$complexTypes.Address_in/oms:XAD.3" />
			<xsl:if test="string($city_120)">
				<xsl:attribute name="value">
					<xsl:value-of select="$city_120" />
				</xsl:attribute>
			</xsl:if>
		</city>
	</xsl:template>
	<xsl:template match="oms:PD1.3" mode="reso_m34">
		<!--WProc template for path /a:feed/a:entry_Organization -->
		<xsl:variable name="resources.Organization_in" select="." />
		<a:entry_Organization>
			<xsl:call-template name="a:id_35">
				<xsl:with-param name="resources.Organization_in" select="$resources.Organization_in" />
			</xsl:call-template>
			<xsl:call-template name="a:content_36">
				<xsl:with-param name="resources.Organization_in" select="$resources.Organization_in" />
			</xsl:call-template>
		</a:entry_Organization>
	</xsl:template>
	<xsl:template name="a:id_35">
		<xsl:param name="resources.Organization_in" />
		<!--WProc template for path /a:feed/a:entry_Organization/a:id -->
		<a:id>
			<xsl:variable name="fhir_id_122" select="$resources.Organization_in/oms:XON.3" />
			<xsl:value-of select="$fhir_id_122" />
		</a:id>
	</xsl:template>
	<xsl:template name="a:content_36">
		<xsl:param name="resources.Organization_in" />
		<!--WProc template for path /a:feed/a:entry_Organization/a:content -->
		<a:content>
			<xsl:variable name="v_123" select="'text/xml'" />
			<xsl:if test="string($v_123)">
				<xsl:attribute name="type">
					<xsl:value-of select="$v_123" />
				</xsl:attribute>
			</xsl:if>
			<xsl:call-template name="Organization_37">
				<xsl:with-param name="resources.Organization_in" select="$resources.Organization_in" />
			</xsl:call-template>
		</a:content>
	</xsl:template>
	<xsl:template name="Organization_37">
		<xsl:param name="resources.Organization_in" />
		<!--WProc template for path /a:feed/a:entry_Organization/a:content/Organization -->
		<Organization>
			<xsl:variable name="name_124" select="$resources.Organization_in/oms:XON.1" />
			<xsl:variable name="v_126" select="$resources.Organization_in/self::node()" />
			<xsl:variable name="complexTypes.CodeableConcept_subset_s1_in" select="$v_126/self::node()" />
			<xsl:variable name="v_132" select="$resources.Organization_in/oms:XON.3" />
			<xsl:variable name="complexTypes.Identifier_in" select="$v_132/self::node()" />
			<xsl:if test="string($name_124)">
				<xsl:call-template name="name_38">
					<xsl:with-param name="resources.Organization_in" select="$resources.Organization_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:apply-templates mode="comp_m35" select="$complexTypes.CodeableConcept_subset_s1_in" />
			<xsl:apply-templates mode="comp_m37" select="$complexTypes.Identifier_in" />
		</Organization>
	</xsl:template>
	<xsl:template name="name_38">
		<xsl:param name="resources.Organization_in" />
		<!--WProc template for path /a:feed/a:entry_Organization/a:content/Organization/name -->
		<name>
			<xsl:variable name="name_125" select="$resources.Organization_in/oms:XON.1" />
			<xsl:if test="string($name_125)">
				<xsl:attribute name="value">
					<xsl:value-of select="$name_125" />
				</xsl:attribute>
			</xsl:if>
		</name>
	</xsl:template>
	<xsl:template match="oms:PD1.3" mode="comp_m35">
		<!--WProc template for path /a:feed/a:entry_Organization/a:content/Organization/type -->
		<xsl:variable name="complexTypes.CodeableConcept_subset_s1_in" select="." />
		<type>
			<xsl:variable name="v_127" select="$complexTypes.CodeableConcept_subset_s1_in/self::node()" />
			<xsl:variable name="complexTypes.Coding_subset_s1_in" select="$v_127/self::node()" />
			<xsl:apply-templates mode="comp_m36" select="$complexTypes.Coding_subset_s1_in" />
		</type>
	</xsl:template>
	<xsl:template match="oms:PD1.3" mode="comp_m36">
		<!--WProc template for path /a:feed/a:entry_Organization/a:content/Organization/type/coding -->
		<xsl:variable name="complexTypes.Coding_subset_s1_in" select="." />
		<coding>
			<xsl:variable name="code_128" select="'prov'" />
			<xsl:variable name="system_130" select="'http://hl7.org/fhir/vs/organization-type'" />
			<xsl:if test="string($code_128)">
				<xsl:call-template name="code_39" />
			</xsl:if>
			<xsl:if test="string($system_130)">
				<xsl:call-template name="system_40" />
			</xsl:if>
		</coding>
	</xsl:template>
	<xsl:template name="code_39">
		<!--WProc template for path /a:feed/a:entry_Organization/a:content/Organization/type/coding/code -->
		<code>
			<xsl:variable name="code_129" select="'prov'" />
			<xsl:if test="string($code_129)">
				<xsl:attribute name="value">
					<xsl:value-of select="$code_129" />
				</xsl:attribute>
			</xsl:if>
		</code>
	</xsl:template>
	<xsl:template name="system_40">
		<!--WProc template for path /a:feed/a:entry_Organization/a:content/Organization/type/coding/system -->
		<system>
			<xsl:variable name="system_131" select="'http://hl7.org/fhir/vs/organization-type'" />
			<xsl:if test="string($system_131)">
				<xsl:attribute name="value">
					<xsl:value-of select="$system_131" />
				</xsl:attribute>
			</xsl:if>
		</system>
	</xsl:template>
	<xsl:template match="oms:XON.3" mode="comp_m37">
		<!--WProc template for path /a:feed/a:entry_Organization/a:content/Organization/identifier -->
		<xsl:variable name="complexTypes.Identifier_in" select="." />
		<identifier>
			<xsl:variable name="value_133" select="$complexTypes.Identifier_in/self::node()" />
			<xsl:variable name="system_135" select="$complexTypes.Identifier_in/ancestor::oms:PD1.3/oms:XON.6" />
			<xsl:if test="string($value_133)">
				<xsl:call-template name="value_41">
					<xsl:with-param name="complexTypes.Identifier_in" select="$complexTypes.Identifier_in" />
				</xsl:call-template>
			</xsl:if>
			<xsl:if test="string($system_135)">
				<xsl:call-template name="system_42">
					<xsl:with-param name="complexTypes.Identifier_in" select="$complexTypes.Identifier_in" />
				</xsl:call-template>
			</xsl:if>
		</identifier>
	</xsl:template>
	<xsl:template name="value_41">
		<xsl:param name="complexTypes.Identifier_in" />
		<!--WProc template for path /a:feed/a:entry_Organization/a:content/Organization/identifier/value -->
		<value>
			<xsl:variable name="value_134" select="$complexTypes.Identifier_in/self::node()" />
			<xsl:if test="string($value_134)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_134" />
				</xsl:attribute>
			</xsl:if>
		</value>
	</xsl:template>
	<xsl:template name="system_42">
		<xsl:param name="complexTypes.Identifier_in" />
		<!--WProc template for path /a:feed/a:entry_Organization/a:content/Organization/identifier/system -->
		<system>
			<xsl:variable name="system_136" select="$complexTypes.Identifier_in/ancestor::oms:PD1.3/oms:XON.6" />
			<xsl:if test="string($system_136)">
				<xsl:attribute name="value">
					<xsl:value-of select="$system_136" />
				</xsl:attribute>
			</xsl:if>
		</system>
	</xsl:template>
	<xsl:template match="oms:PD1.4" mode="reso_m38">
		<!--WProc template for path /a:feed/a:entry_Practitioner -->
		<xsl:variable name="resources.Practitioner_in" select="." />
		<a:entry_Practitioner>
			<xsl:call-template name="a:id_43">
				<xsl:with-param name="resources.Practitioner_in" select="$resources.Practitioner_in" />
			</xsl:call-template>
			<xsl:call-template name="a:content_44">
				<xsl:with-param name="resources.Practitioner_in" select="$resources.Practitioner_in" />
			</xsl:call-template>
		</a:entry_Practitioner>
	</xsl:template>
	<xsl:template name="a:id_43">
		<xsl:param name="resources.Practitioner_in" />
		<!--WProc template for path /a:feed/a:entry_Practitioner/a:id -->
		<a:id>
			<xsl:variable name="fhir_id_138" select="$resources.Practitioner_in/oms:XCN.1" />
			<xsl:value-of select="$fhir_id_138" />
		</a:id>
	</xsl:template>
	<xsl:template name="a:content_44">
		<xsl:param name="resources.Practitioner_in" />
		<!--WProc template for path /a:feed/a:entry_Practitioner/a:content -->
		<a:content>
			<xsl:variable name="v_139" select="'text/xml'" />
			<xsl:if test="string($v_139)">
				<xsl:attribute name="type">
					<xsl:value-of select="$v_139" />
				</xsl:attribute>
			</xsl:if>
			<xsl:call-template name="Practitioner_45">
				<xsl:with-param name="resources.Practitioner_in" select="$resources.Practitioner_in" />
			</xsl:call-template>
		</a:content>
	</xsl:template>
	<xsl:template name="Practitioner_45">
		<xsl:param name="resources.Practitioner_in" />
		<!--WProc template for path /a:feed/a:entry_Practitioner/a:content/Practitioner -->
		<Practitioner>
			<xsl:variable name="v_140" select="$resources.Practitioner_in/ancestor::oms:PD1/oms:PD1.3/oms:XON.3" />
			<xsl:variable name="v_141" select="$v_140/ancestor::oms:PD1.3" />
			<xsl:variable name="v_142" select="$v_141/self::node()" />
			<xsl:variable name="feed.AtomFeed_in" select="($v_142/ancestor::oms:ADR_A19)[1]" />
			<xsl:variable name="resources.Organization_in" select="$v_141/self::node()[($feed.AtomFeed_in)]" />
			<xsl:variable name="v_148" select="$resources.Practitioner_in/self::node()" />
			<xsl:variable name="complexTypes.HumanName_in" select="$v_148/self::node()" />
			<xsl:variable name="v_155" select="$resources.Practitioner_in/self::node()" />
			<xsl:variable name="complexTypes.CodeableConcept_in" select="$v_155/self::node()" />
			<xsl:variable name="v_161" select="$resources.Practitioner_in/oms:XCN.1" />
			<xsl:variable name="complexTypes.Identifier_subset_s1_in" select="$v_161/self::node()" />
			<xsl:apply-templates mode="reso_m39" select="$resources.Organization_in">
				<xsl:with-param name="resources.Practitioner_in" select="$resources.Practitioner_in" />
			</xsl:apply-templates>
			<xsl:apply-templates mode="comp_m41" select="$complexTypes.HumanName_in" />
			<xsl:apply-templates mode="comp_m45" select="$complexTypes.CodeableConcept_in" />
			<xsl:apply-templates mode="comp_m47" select="$complexTypes.Identifier_subset_s1_in" />
		</Practitioner>
	</xsl:template>
	<xsl:template match="oms:PD1.3" mode="reso_m39">
		<xsl:param name="resources.Practitioner_in" />
		<!--WProc template for path /a:feed/a:entry_Practitioner/a:content/Practitioner/organization -->
		<xsl:variable name="resources.Organization_in" select="." />
		<organization>
			<xsl:call-template name="reference_46">
				<xsl:with-param name="resources.Practitioner_in" select="$resources.Practitioner_in" />
			</xsl:call-template>
		</organization>
	</xsl:template>
	<xsl:template name="reference_46">
		<xsl:param name="resources.Practitioner_in" />
		<!--WProc template for path /a:feed/a:entry_Practitioner/a:content/Practitioner/organization/reference -->
		<reference>
			<xsl:variable name="v_143">
				<xsl:variable name="v_144" select="$resources.Practitioner_in/ancestor::oms:PD1/oms:PD1.3/oms:XON.3" />
				<xsl:variable name="v_145" select="$v_144/ancestor::oms:PD1.3" />
				<xsl:variable name="v_146" select="$v_145/self::node()" />
				<xsl:variable name="feed.AtomFeed_in" select="($v_146/ancestor::oms:ADR_A19)[1]" />
				<xsl:variable name="resources.Organization_in" select="$v_145/self::node()[($feed.AtomFeed_in)]" />
				<xsl:apply-templates mode="reso_m40" select="$resources.Organization_in" />
			</xsl:variable>
			<xsl:if test="string($v_143)">
				<xsl:attribute name="value">
					<xsl:value-of select="$v_143" />
				</xsl:attribute>
			</xsl:if>
		</reference>
	</xsl:template>
	<xsl:template match="oms:PD1.3" mode="reso_m40">
		<!--Property template for property fhir_id of class resources.Organization -->
		<xsl:variable name="resources.Organization_in" select="." />
		<xsl:variable name="fhir_id_147" select="$resources.Organization_in/oms:XON.3" />
		<xsl:value-of select="$fhir_id_147" />
	</xsl:template>
	<xsl:template match="oms:PD1.4" mode="comp_m41">
		<!--WProc template for path /a:feed/a:entry_Practitioner/a:content/Practitioner/name -->
		<xsl:variable name="complexTypes.HumanName_in" select="." />
		<name>
			<xsl:variable name="v_149" select="$complexTypes.HumanName_in/oms:XCN.5" />
			<xsl:variable name="primitiveTypes.String__subset_s2_in" select="$v_149/self::node()" />
			<xsl:variable name="v_151" select="$complexTypes.HumanName_in/oms:XCN.3" />
			<xsl:variable name="primitiveTypes.String__subset_s1_in" select="$v_151/self::node()" />
			<xsl:variable name="v_153" select="$complexTypes.HumanName_in/oms:XCN.2/oms:FN.1" />
			<xsl:variable name="primitiveTypes.String__in" select="$v_153/self::node()" />
			<xsl:apply-templates mode="prim_m42" select="$primitiveTypes.String__subset_s2_in" />
			<xsl:apply-templates mode="prim_m43" select="$primitiveTypes.String__subset_s1_in" />
			<xsl:apply-templates mode="prim_m44" select="$primitiveTypes.String__in" />
		</name>
	</xsl:template>
	<xsl:template match="oms:XCN.5" mode="prim_m42">
		<!--WProc template for path /a:feed/a:entry_Practitioner/a:content/Practitioner/name/suffix -->
		<xsl:variable name="primitiveTypes.String__subset_s2_in" select="." />
		<suffix>
			<xsl:variable name="value_150" select="$primitiveTypes.String__subset_s2_in/self::node()" />
			<xsl:if test="string($value_150)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_150" />
				</xsl:attribute>
			</xsl:if>
		</suffix>
	</xsl:template>
	<xsl:template match="oms:XCN.3" mode="prim_m43">
		<!--WProc template for path /a:feed/a:entry_Practitioner/a:content/Practitioner/name/given -->
		<xsl:variable name="primitiveTypes.String__subset_s1_in" select="." />
		<given>
			<xsl:variable name="value_152" select="$primitiveTypes.String__subset_s1_in/self::node()" />
			<xsl:if test="string($value_152)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_152" />
				</xsl:attribute>
			</xsl:if>
		</given>
	</xsl:template>
	<xsl:template match="oms:FN.1" mode="prim_m44">
		<!--WProc template for path /a:feed/a:entry_Practitioner/a:content/Practitioner/name/family -->
		<xsl:variable name="primitiveTypes.String__in" select="." />
		<family>
			<xsl:variable name="value_154" select="$primitiveTypes.String__in/self::node()" />
			<xsl:if test="string($value_154)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_154" />
				</xsl:attribute>
			</xsl:if>
		</family>
	</xsl:template>
	<xsl:template match="oms:PD1.4" mode="comp_m45">
		<!--WProc template for path /a:feed/a:entry_Practitioner/a:content/Practitioner/role -->
		<xsl:variable name="complexTypes.CodeableConcept_in" select="." />
		<role>
			<xsl:variable name="v_156" select="$complexTypes.CodeableConcept_in/self::node()" />
			<xsl:variable name="complexTypes.Coding_in" select="$v_156/self::node()" />
			<xsl:apply-templates mode="comp_m46" select="$complexTypes.Coding_in" />
		</role>
	</xsl:template>
	<xsl:template match="oms:PD1.4" mode="comp_m46">
		<!--WProc template for path /a:feed/a:entry_Practitioner/a:content/Practitioner/role/coding -->
		<xsl:variable name="complexTypes.Coding_in" select="." />
		<coding>
			<xsl:variable name="code_157" select="'doctor'" />
			<xsl:variable name="system_159" select="'http://hl7.org/fhir/vs/practitioner-role'" />
			<xsl:if test="string($code_157)">
				<xsl:call-template name="code_47" />
			</xsl:if>
			<xsl:if test="string($system_159)">
				<xsl:call-template name="system_48" />
			</xsl:if>
		</coding>
	</xsl:template>
	<xsl:template name="code_47">
		<!--WProc template for path /a:feed/a:entry_Practitioner/a:content/Practitioner/role/coding/code -->
		<code>
			<xsl:variable name="code_158" select="'doctor'" />
			<xsl:if test="string($code_158)">
				<xsl:attribute name="value">
					<xsl:value-of select="$code_158" />
				</xsl:attribute>
			</xsl:if>
		</code>
	</xsl:template>
	<xsl:template name="system_48">
		<!--WProc template for path /a:feed/a:entry_Practitioner/a:content/Practitioner/role/coding/system -->
		<system>
			<xsl:variable name="system_160" select="'http://hl7.org/fhir/vs/practitioner-role'" />
			<xsl:if test="string($system_160)">
				<xsl:attribute name="value">
					<xsl:value-of select="$system_160" />
				</xsl:attribute>
			</xsl:if>
		</system>
	</xsl:template>
	<xsl:template match="oms:XCN.1" mode="comp_m47">
		<!--WProc template for path /a:feed/a:entry_Practitioner/a:content/Practitioner/identifier -->
		<xsl:variable name="complexTypes.Identifier_subset_s1_in" select="." />
		<identifier>
			<xsl:variable name="value_162" select="$complexTypes.Identifier_subset_s1_in/self::node()" />
			<xsl:if test="string($value_162)">
				<xsl:call-template name="value_49">
					<xsl:with-param name="complexTypes.Identifier_subset_s1_in" select="$complexTypes.Identifier_subset_s1_in" />
				</xsl:call-template>
			</xsl:if>
		</identifier>
	</xsl:template>
	<xsl:template name="value_49">
		<xsl:param name="complexTypes.Identifier_subset_s1_in" />
		<!--WProc template for path /a:feed/a:entry_Practitioner/a:content/Practitioner/identifier/value -->
		<value>
			<xsl:variable name="value_163" select="$complexTypes.Identifier_subset_s1_in/self::node()" />
			<xsl:if test="string($value_163)">
				<xsl:attribute name="value">
					<xsl:value-of select="$value_163" />
				</xsl:attribute>
			</xsl:if>
		</value>
	</xsl:template>
	<xsl:variable name="inWrapper_result" select="." />
	<xsl:variable name="main_result">
		<xsl:apply-templates mode="main" select="$inWrapper_result" />
	</xsl:variable>
	<xsl:template match="/">
		<xsl:apply-templates mode="outWrapper" select="$main_result" />
	</xsl:template>
	<xsl:template match="*" mode="outWrapper">
		<xsl:copy>
			<xsl:copy-of select="@*" />
			<xsl:apply-templates mode="outWrapper" />
		</xsl:copy>
	</xsl:template>
	<xsl:template match="a:entry_Patient" mode="outWrapper" priority="1.2">
		<xsl:if test="not(preceding-sibling::a:entry_Patient[a:id=current()/a:id])">
			<a:entry>
				<xsl:copy-of select="@*" />
				<xsl:apply-templates mode="outWrapper" />
			</a:entry>
		</xsl:if>
	</xsl:template>
	<xsl:template match="a:entry_Organization" mode="outWrapper" priority="1.2">
		<xsl:if test="not(preceding-sibling::a:entry_Organization[a:id=current()/a:id])">
			<a:entry>
				<xsl:copy-of select="@*" />
				<xsl:apply-templates mode="outWrapper" />
			</a:entry>
		</xsl:if>
	</xsl:template>
	<xsl:template match="a:entry_Practitioner" mode="outWrapper" priority="1.2">
		<xsl:if test="not(preceding-sibling::a:entry_Practitioner[a:id=current()/a:id])">
			<a:entry>
				<xsl:copy-of select="@*" />
				<xsl:apply-templates mode="outWrapper" />
			</a:entry>
		</xsl:if>
	</xsl:template>
	<xsl:template match="a:entry_ValueSet" mode="outWrapper" priority="1.2">
		<xsl:if test="not(preceding-sibling::a:entry_ValueSet[a:id=current()/a:id])">
			<a:entry>
				<xsl:copy-of select="@*" />
				<xsl:apply-templates mode="outWrapper" />
			</a:entry>
		</xsl:if>
	</xsl:template>
	<xsl:template match="a:entry_Location" mode="outWrapper" priority="1.2">
		<xsl:if test="not(preceding-sibling::a:entry_Location[a:id=current()/a:id])">
			<a:entry>
				<xsl:copy-of select="@*" />
				<xsl:apply-templates mode="outWrapper" />
			</a:entry>
		</xsl:if>
	</xsl:template>
	<xsl:template name="in_convertRelationship">

		<xsl:param name="code" />

		<xsl:if test="$code='NOK'">

			<xsl:value-of select="'family'" />
		</xsl:if>

		<!-- other cases to follow when defined -->
	</xsl:template>
	<xsl:template name="in_convertBoolean">

		<xsl:param name="deceasedBoolean" />

		<xsl:if test="$deceasedBoolean='Y'">

			<xsl:value-of select="'true'" />
		</xsl:if>

		<xsl:if test="$deceasedBoolean='N'">

			<xsl:value-of select="'false'" />
		</xsl:if>
	</xsl:template>
	<xsl:template name="in_convertDateOfBirth_in">

		<xsl:param name="birthDate" />

		<xsl:value-of select="concat(substring($birthDate,1,4),'-',substring($birthDate,5,2),'-',substring($birthDate,7,2))" />
	</xsl:template>
	<xsl:template name="in_makeUpdatedTime">

		<xsl:param name="updated" />

		<xsl:value-of select="current-dateTime()" />
	</xsl:template>
</xsl:stylesheet>
